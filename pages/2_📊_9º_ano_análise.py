import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="üìä Recomposi√ß√£o de Aprendizagem", layout="wide")

# T√≠tulo do aplicativo
st.title("Recomposi√ß√£o de Aprendizagem")

# Dicion√°rios com descri√ß√µes das habilidades por disciplina
DESCRICOES_HABILIDADES = {
    "Portugues": {
        "H01": "Identificar a finalidade de textos de diferentes g√™neros.",
        "H02": "Localizar informa√ß√£o expl√≠cita.",
        "H03": "Inferir informa√ß√µes em textos.",
        "H04": "Reconhecer efeito de humor ou de ironia em um texto.",
        "H05": "Distinguir ideias centrais de secund√°rias ou t√≥picos e subt√≥picos em um dado g√™nero textual.",
        "H06": "Reconhecer os elementos que comp√µem uma narrativa e o conflito gerador.",
        "H07": "Identificar a tese de um texto.",
        "H08": "Reconhecer posi√ß√µes distintas relativas ao mesmo fato ou mesmo tema.",
        "H09": "Reconhecer as rela√ß√µes entre partes de um texto, identificando os recursos coesivos que contribuem para a sua continuidade.",
        "H10": "Distinguir um fato da opini√£o.",
        "H11": "Reconhecer o sentido das rela√ß√µes l√≥gico-discursivas em um texto.",
        "H12": "Reconhecer o efeito de sentido decorrente da escolha de uma determinada palavra ou express√£o.",
        "H13": "Estabelecer rela√ß√£o entre a tese e os argumentos oferecidos para sustent√°-la.",
        "H14": "Reconhecer o efeito de sentido decorrente da explora√ß√£o de recursos ortogr√°ficos e/ou morfossint√°ticos.",
        "H15": "Identificar as marcas lingu√≠sticas que evidenciam o locutor e o interlocutor de um texto.",
    },
    "Matematica": {
        "H01": "Corresponder figuras tridimensionais √†s suas planifica√ß√µes.",
        "H02": "Utilizar informa√ß√µes apresentadas em tabelas ou gr√°ficos na resolu√ß√£o de problemas.",
        "H03": "Utilizar √°rea de figuras bidimensionais na resolu√ß√£o de problema.",
        "H04": "Identificar fra√ß√µes equivalentes.",
        "H05": "Utilizar convers√£o entre unidades de medida, na resolu√ß√£o de problema.",
        "H06": "Utilizar o princ√≠pio multiplicativo de contagem na resolu√ß√£o de problema.",
        "H07": "Utilizar proporcionalidade entre duas grandezas na resolu√ß√£o de problema.",
        "H08": "Classificar quadril√°teros por meio de suas propriedades.",
        "H09": "Classificar tri√¢ngulos por meio de suas propriedades.",
        "H10": "Corresponder diferentes representa√ß√µes de um n√∫mero racional.",
        "H11": "Utilizar o c√°lculo de volumes/capacidade de prismas retos e de cilindros na resolu√ß√£o de problema.",
        "H12": "Utilizar per√≠metro de figuras bidimensionais na resolu√ß√£o de problema.",
        "H13": "Utilizar porcentagem na resolu√ß√£o de problemas.",
        "H14": "Identificar a express√£o alg√©brica that expressa uma regularidade observada em sequ√™ncia de n√∫meros ou figuras (padr√µes).",
        "H15": "Executar c√°lculos com n√∫meros reais.",
        "H16": "Utilizar o c√°lculo do valor num√©rico de express√µes alg√©bricas na resolu√ß√£o de problemas.",
        "H17": "Utilizar rela√ß√µes m√©tricas de um tri√¢ngulo ret√¢ngulo na resolu√ß√£o de problema.",
        "H18": "Utilizar equa√ß√£o polinomial de 2¬∫ grau na resolu√ß√£o de problema.",
        "H19": "Utilizar n√∫meros racionais, envolvendo diferentes significados das opera√ß√µes, na resolu√ß√£o de problemas.",
        "H20": "Identificar uma equa√ß√£o ou inequa√ß√£o do 1¬∫ grau que expressa um problema."
    }
}

# Fun√ß√£o para carregar dados
def carregar_dados(disciplina, prova):
    """Carrega o arquivo CSV correspondente √† disciplina e prova selecionadas"""
    try:
        # Construir o nome do arquivo
        nome_arquivo = f"CAED{prova}_9_{disciplina.lower()}.csv"
        
        # Tenta encontrar o arquivo na mesma pasta
        script_dir = os.path.dirname(os.path.abspath(__file__))
        csv_path = os.path.join(script_dir, nome_arquivo)
        
        if os.path.exists(csv_path):
            df = pd.read_csv(csv_path, sep=';', encoding='utf-8')
            return df
        else:
            st.error(f"Arquivo '{nome_arquivo}' n√£o encontrado na pasta do script.")
            st.info(f"Certifique-se de que o arquivo '{nome_arquivo}' est√° na mesma pasta que este script.")
            return None
                
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")
        return None

# Fun√ß√£o para obter descri√ß√£o do n√≠vel
def get_nivel_descricao(valor, disciplina):
    if disciplina == "Portugues":
        if valor == 0:
            return "‚ùå N√£o Domina"
        elif valor == 1:
            return "‚ö†Ô∏è Domina"
        elif valor == 2:
            return "‚úÖ Domina Plenamente"
        else:  # valor == 3
            return "üèÜ Completamente Dominado"
    else:  # Matematica
        if valor == 0:
            return "‚ùå N√£o Domina"
        elif valor == 1:
            return "‚ö†Ô∏è Domina"
        else:
            return "‚úÖ Domina Plenamente"

# Fun√ß√£o para obter descri√ß√£o da habilidade
def get_descricao_habilidade(codigo, disciplina):
    return DESCRICOES_HABILIDADES[disciplina].get(codigo, "Descri√ß√£o n√£o dispon√≠vel")

# Fun√ß√£o para obter pontua√ß√£o m√°xima
def get_pontuacao_maxima(disciplina):
    return 3 if disciplina == "Portugues" else 2

# Sidebar com sele√ß√£o de disciplina e prova
st.sidebar.header("üîß Configura√ß√µes")

prova = st.sidebar.selectbox(
    "Selecione a prova:",
    [1, 2]
)

disciplina = st.sidebar.selectbox(
    "Selecione a disciplina:",
    ["Portugues", "Matematica"]
)

# Carregar dados automaticamente
df = carregar_dados(disciplina, prova)

if df is not None:
    try:
        # Limpar nomes das colunas
        df.columns = df.columns.str.strip()
        
        # Determinar o n√∫mero m√°ximo de habilidades com base na disciplina
        max_habilidades = 15 if disciplina == "Portugues" else 20
        
        # Filtrar apenas as colunas de H01 a H(max_habilidades)
        habilidades_cols = [col for col in df.columns if col.startswith('H ') and int(col.split()[1]) <= max_habilidades]
        
        # Renomear colunas para formato mais amig√°vel
        nome_habilidades = {col: f'H{int(col.split()[1]):02d}' for col in habilidades_cols}
        df_renomeado = df.rename(columns=nome_habilidades)
        
        # Dados dos alunos com habilidades
        alunos_habilidades = df_renomeado[['Aluno', 'Turma'] + list(nome_habilidades.values())]
        
        # Sidebar com informa√ß√µes
        st.sidebar.header("Col√©gio Estadual S√£o Braz")
        st.sidebar.write("Recomposi√ß√£o da Aprendizagem")
        st.sidebar.header("üìä Informa√ß√µes Gerais")
        st.sidebar.write(f"**Total de Alunos:** {len(alunos_habilidades)}")
        st.sidebar.write(f"**Total de Habilidades:** {len(nome_habilidades)}")
        
        # Filtro por turma no sidebar
        st.sidebar.header("üéØ Filtros")
        turmas_disponiveis = sorted(alunos_habilidades['Turma'].unique())
        turma_selecionada = st.sidebar.multiselect(
            "Selecionar Turma(s):",
            options=turmas_disponiveis,
            default=turmas_disponiveis,
            help="Selecione uma ou mais turmas para filtrar"
        )
        
        # Aplicar filtro de turma
        if turma_selecionada:
            alunos_filtrados = alunos_habilidades[alunos_habilidades['Turma'].isin(turma_selecionada)]
            st.sidebar.write(f"**Turmas selecionadas:** {', '.join(map(str, turma_selecionada))}")
            st.sidebar.write(f"**Alunos filtrados:** {len(alunos_filtrados)}")
        else:
            alunos_filtrados = alunos_habilidades
            st.sidebar.write("**Mostrando todas as turmas**")
        
        # Menu principal
        st.sidebar.header("üîß Navega√ß√£o")
        tipo_analise = st.sidebar.radio(
            "Selecione o tipo de an√°lise:",
            ["Buscar Aluno Espec√≠fico", "Ver Grupos por Habilidade", "Vis√£o Geral dos Grupos", "Estat√≠sticas Gerais"]
        )
        
        if tipo_analise == "Buscar Aluno Espec√≠fico":
            st.header("üîç An√°lise Individual por Aluno")
            
            # Selecionar aluno apenas da turma filtrada
            alunos_disponiveis = sorted(alunos_filtrados['Aluno'].tolist())
            aluno_selecionado = st.selectbox(
                "Selecione um aluno:",
                alunos_disponiveis
            )
            
            # Dados do aluno selecionado
            aluno_data = alunos_filtrados[alunos_filtrados['Aluno'] == aluno_selecionado].iloc[0]
            
            # Layout das colunas baseado na disciplina
            if disciplina == "Portugues":
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.subheader("‚ùå N√£o Domina")
                    nao_domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 0:
                            nao_domina.append(hab)
                    if nao_domina:
                        for hab in sorted(nao_domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.success("üéâ Nenhuma habilidade n√£o dominada!")
                
                with col2:
                    st.subheader("‚ö†Ô∏è Domina")
                    domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 1:
                            domina.append(hab)
                    if domina:
                        for hab in sorted(domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                with col3:
                    st.subheader("‚úÖ Domina Plenamente")
                    domina_plenamente = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 2:
                            domina_plenamente.append(hab)
                    if domina_plenamente:
                        for hab in sorted(domina_plenamente):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                        
                with col4:
                    st.subheader("üèÜ Completamente Dominado")
                    completamente_dominado = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 3:
                            completamente_dominado.append(hab)
                    if completamente_dominado:
                        for hab in sorted(completamente_dominado):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                # Estat√≠sticas do aluno
                st.subheader("üìä Estat√≠sticas do Aluno")
                col_stats1, col_stats2, col_stats3, col_stats4, col_stats5 = st.columns(5)
                
                with col_stats1:
                    st.metric("N√£o Domina", f"{len(nao_domina)}", f"{len(nao_domina)/len(nome_habilidades)*100:.1f}%")
                with col_stats2:
                    st.metric("Domina", f"{len(domina)}", f"{len(domina)/len(nome_habilidades)*100:.1f}%")
                with col_stats3:
                    st.metric("Domina Plenamente", f"{len(domina_plenamente)}", f"{len(domina_plenamente)/len(nome_habilidades)*100:.1f}%")
                with col_stats4:
                    st.metric("Completamente Dominado", f"{len(completamente_dominado)}", f"{len(completamente_dominado)/len(nome_habilidades)*100:.1f}%")
                with col_stats5:
                    pontuacao_total = sum([aluno_data[hab] for hab in nome_habilidades.values()])
                    pontuacao_maxima = len(nome_habilidades) * get_pontuacao_maxima(disciplina)
                    st.metric("Pontua√ß√£o Total", f"{pontuacao_total}/{pontuacao_maxima}", f"{pontuacao_total/pontuacao_maxima*100:.1f}%")
                
            else:  # Matematica
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.subheader("‚ùå N√£o Domina")
                    nao_domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 0:
                            nao_domina.append(hab)
                    if nao_domina:
                        for hab in sorted(nao_domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.success("üéâ Domina todas as habilidades!")
                
                with col2:
                    st.subheader("‚ö†Ô∏è Domina")
                    domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 1:
                            domina.append(hab)
                    if domina:
                        for hab in sorted(domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                with col3:
                    st.subheader("‚úÖ Domina Plenamente")
                    domina_plenamente = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 2:
                            domina_plenamente.append(hab)
                    if domina_plenamente:
                        for hab in sorted(domina_plenamente):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                # Estat√≠sticas do aluno
                st.subheader("üìä Estat√≠sticas do Aluno")
                col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
                
                with col_stats1:
                    st.metric("N√£o Domina", f"{len(nao_domina)}", f"{len(nao_domina)/len(nome_habilidades)*100:.1f}%")
                with col_stats2:
                    st.metric("Domina", f"{len(domina)}", f"{len(domina)/len(nome_habilidades)*100:.1f}%")
                with col_stats3:
                    st.metric("Domina Plenamente", f"{len(domina_plenamente)}", f"{len(domina_plenamente)/len(nome_habilidades)*100:.1f}%")
                with col_stats4:
                    pontuacao_total = sum([aluno_data[hab] for hab in nome_habilidades.values()])
                    pontuacao_maxima = len(nome_habilidades) * get_pontuacao_maxima(disciplina)
                    st.metric("Pontua√ß√£o Total", f"{pontuacao_total}/{pontuacao_maxima}", f"{pontuacao_total/pontuacao_maxima*100:.1f}%")
                        
            # Gr√°fico de Radar Elegante
            st.subheader("üìä Perfil de Habilidades - Radar")

            # Dados para o radar
            habilidades = list(nome_habilidades.values())
            valores = [aluno_data[hab] for hab in nome_habilidades.values()]

            # Cores baseadas nos valores
            cores = []
            for valor in valores:
                if valor == 0:
                    cores.append('#FF6B6B')  # Vermelho para n√£o domina
                elif valor == 1:
                    cores.append('#FFD93D')  # Amarelo para domina
                elif valor == 2:
                    cores.append('#6BCB77')  # Verde para domina plenamente
                else:  # valor == 3 (apenas Portugu√™s)
                    cores.append('#4D96FF')  # Azul para completamente dominado

            # Criar gr√°fico de radar
            fig = go.Figure()

            fig.add_trace(go.Scatterpolar(
                r=valores,
                theta=habilidades,
                fill='toself',
                fillcolor='rgba(77, 150, 255, 0.2)',
                line=dict(color='rgba(77, 150, 255, 0.8)', width=2),
                marker=dict(size=8, color=cores, line=dict(width=1, color='DarkSlateGrey')),
                name=aluno_selecionado
            ))

            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, get_pontuacao_maxima(disciplina)],
                        tickvals=list(range(get_pontuacao_maxima(disciplina)+1)),
                        ticktext=[get_nivel_descricao(i, disciplina).split()[-1] for i in range(get_pontuacao_maxima(disciplina)+1)]
                    )
                ),
                showlegend=False,
                title=f"Perfil de Habilidades de {aluno_selecionado}",
                height=500
            )

            st.plotly_chart(fig, use_container_width=True)
            
        elif tipo_analise == "Ver Grupos por Habilidade":
            st.header("üë• Grupos por Habilidade")
            
            # Selecionar habilidade
            habilidade_selecionada = st.selectbox(
                "Selecione a habilidade:",
                sorted(nome_habilidades.values())
            )
            
            # Descri√ß√£o da habilidade
            st.info(f"**Descri√ß√£o:** {get_descricao_habilidade(habilidade_selecionada, disciplina)}")
            
            # Agrupar alunos por n√≠vel de dom√≠nio
            grupos = {
                "‚ùå N√£o Domina": alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 0],
                "‚ö†Ô∏è Domina": alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 1],
                "‚úÖ Domina Plenamente": alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 2]
            }
            
            if disciplina == "Portugues":
                grupos["üèÜ Completamente Dominado"] = alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 3]
            
            # Layout com abas para cada grupo
            tabs = st.tabs(list(grupos.keys()))
            
            for i, (nivel, grupo) in enumerate(grupos.items()):
                with tabs[i]:
                    st.subheader(f"{nivel} ({len(grupo)} alunos)")
                    
                    if len(grupo) > 0:
                        # Mostrar alunos em colunas
                        col_count = 3
                        cols = st.columns(col_count)
                        
                        for idx, (_, aluno) in enumerate(grupo.iterrows()):
                            with cols[idx % col_count]:
                                st.write(f"**{aluno['Aluno']}** (Turma {aluno['Turma']})")
                    else:
                        st.info("Nenhum aluno neste grupo")
            
            # Gr√°fico de distribui√ß√£o
            st.subheader("üìä Distribui√ß√£o por N√≠vel de Dom√≠nio")
            
            # Contar alunos por n√≠vel
            contagem_niveis = {nivel: len(grupo) for nivel, grupo in grupos.items()}
            
            # Criar gr√°fico de pizza
            fig = px.pie(
                values=list(contagem_niveis.values()),
                names=list(contagem_niveis.keys()),
                title=f"Distribui√ß√£o de alunos por n√≠vel de dom√≠nio - {habilidade_selecionada}",
                color=list(contagem_niveis.keys()),
                color_discrete_map={
                    "‚ùå N√£o Domina": "#FF6B6B",
                    "‚ö†Ô∏è Domina": "#FFD93D",
                    "‚úÖ Domina Plenamente": "#6BCB77",
                    "üèÜ Completamente Dominado": "#4D96FF"
                }
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        elif tipo_analise == "Vis√£o Geral dos Grupos":
            st.header("üìã Vis√£o Geral dos Grupos")
            
            # Definir n√≠veis baseado na disciplina
            niveis = ["‚ùå N√£o Domina", "‚ö†Ô∏è Domina", "‚úÖ Domina Plenamente"]
            if disciplina == "Portugues":
                niveis.append("üèÜ Completamente Dominado")
            
            # Selecionar n√≠vel
            nivel_selecionado = st.selectbox("Selecione o n√≠vel:", niveis)
            
            # Mapear n√≠vel para valor num√©rico
            nivel_para_valor = {
                "‚ùå N√£o Domina": 0,
                "‚ö†Ô∏è Domina": 1,
                "‚úÖ Domina Plenamente": 2,
                "üèÜ Completamente Dominado": 3
            }
            
            valor_nivel = nivel_para_valor[nivel_selecionado]
            
            # Encontrar alunos que est√£o no n√≠vel selecionado para pelo menos uma habilidade
            alunos_no_nivel = []
            
            for _, aluno in alunos_filtrados.iterrows():
                habilidades_no_nivel = []
                for hab in nome_habilidades.values():
                    if aluno[hab] == valor_nivel:
                        habilidades_no_nivel.append(hab)
                
                if habilidades_no_nivel:
                    alunos_no_nivel.append({
                        "Aluno": aluno["Aluno"],
                        "Turma": aluno["Turma"],
                        "Habilidades": ", ".join(sorted(habilidades_no_nivel)),
                        "Quantidade": len(habilidades_no_nivel)
                    })
            
            # Converter para DataFrame
            df_nivel = pd.DataFrame(alunos_no_nivel)
            
            if len(df_nivel) > 0:
                # Ordenar por quantidade (decrescente)
                df_nivel = df_nivel.sort_values("Quantidade", ascending=False)
                
                # Mostrar tabela
                st.subheader(f"Alunos que {nivel_selecionado.split()[-1]} pelo menos uma habilidade")
                st.dataframe(
                    df_nivel,
                    column_config={
                        "Aluno": "Aluno",
                        "Turma": "Turma",
                        "Habilidades": "Habilidades",
                        "Quantidade": st.column_config.NumberColumn(
                            "Quantidade",
                            help="N√∫mero de habilidades neste n√≠vel",
                            format="%d"
                        )
                    },
                    hide_index=True,
                    use_container_width=True
                )
                
                # Estat√≠sticas
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total de Alunos", len(df_nivel))
                with col2:
                    st.metric("M√©dia de Habilidades", f"{df_nivel['Quantidade'].mean():.1f}")
                with col3:
                    st.metric("Habilidade mais comum", df_nivel['Habilidades'].str.split(', ').explode().mode().iloc[0] if not df_nivel.empty else "N/A")
                
                # Gr√°fico de distribui√ß√£o
                st.subheader("Distribui√ß√£o por Quantidade de Habilidades")
                
                # Contar alunos por quantidade de habilidades no n√≠vel
                contagem_quantidade = df_nivel['Quantidade'].value_counts().sort_index()
                
                fig = px.bar(
                    x=contagem_quantidade.index,
                    y=contagem_quantidade.values,
                    labels={'x': 'Quantidade de Habilidades', 'y': 'N√∫mero de Alunos'},
                    title=f"Distribui√ß√£o de alunos por quantidade de habilidades que {nivel_selecionado.split()[-1]}"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
            else:
                st.info(f"Nenhum aluno {nivel_selecionado.split()[-1]} nenhuma habilidade")
                
        elif tipo_analise == "Estat√≠sticas Gerais":
            st.header("üìà Estat√≠sticas Gerais")
            
            # Estat√≠sticas por turma
            st.subheader("Estat√≠sticas por Turma")
            
            # Calcular estat√≠sticas para cada turma
            estatisticas_turmas = []
            
            for turma in turmas_disponiveis:
                if turma in turma_selecionada:
                    alunos_turma = alunos_filtrados[alunos_filtrados['Turma'] == turma]
                    
                    # Calcular pontua√ß√£o m√©dia por habilidade
                    pontuacao_media = alunos_turma[nome_habilidades.values()].mean().mean()
                    
                    # Calcular percentual de dom√≠nio (pontua√ß√£o > 0)
                    dominio_geral = (alunos_turma[nome_habilidades.values()] > 0).mean().mean() * 100
                    
                    # Calcular percentual de dom√≠nio pleno (pontua√ß√£o m√°xima)
                    if disciplina == "Portugues":
                        dominio_pleno = (alunos_turma[nome_habilidades.values()] == 3).mean().mean() * 100
                    else:
                        dominio_pleno = (alunos_turma[nome_habilidades.values()] == 2).mean().mean() * 100
                    
                    estatisticas_turmas.append({
                        "Turma": turma,
                        "Alunos": len(alunos_turma),
                        "Pontua√ß√£o M√©dia": pontuacao_media,
                        "Dom√≠nio Geral (%)": dominio_geral,
                        "Dom√≠nio Pleno (%)": dominio_pleno
                    })
            
            # Exibir estat√≠sticas das turmas
            if estatisticas_turmas:
                df_estatisticas = pd.DataFrame(estatisticas_turmas)
                st.dataframe(
                    df_estatisticas,
                    column_config={
                        "Turma": "Turma",
                        "Alunos": "N¬∫ de Alunos",
                        "Pontua√ß√£o M√©dia": st.column_config.NumberColumn(
                            "Pontua√ß√£o M√©dia",
                            format="%.2f"
                        ),
                        "Dom√≠nio Geral (%)": st.column_config.NumberColumn(
                            "Dom√≠nio Geral (%)",
                            format="%.1f%%"
                        ),
                        "Dom√≠nio Pleno (%)": st.column_config.NumberColumn(
                            "Dom√≠nio Pleno (%)",
                            format="%.1f%%"
                        )
                    },
                    hide_index=True,
                    use_container_width=True
                )
            
            # Habilidades com maior e menor dom√≠nio
            st.subheader("Habilidades com Maior e Menor Dom√≠nio")
            
            # Calcular percentual de dom√≠nio por habilidade
            dominio_por_habilidade = []
            
            for hab in nome_habilidades.values():
                dominio = (alunos_filtrados[hab] > 0).mean() * 100
                dominio_por_habilidade.append({
                    "Habilidade": hab,
                    "Dom√≠nio (%)": dominio,
                    "Descri√ß√£o": get_descricao_habilidade(hab, disciplina)
                })
            
            df_dominio = pd.DataFrame(dominio_por_habilidade).sort_values("Dom√≠nio (%)", ascending=False)
            
            # Mostrar as 5 melhores e 5 piores habilidades
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Top 5 - Maior Dom√≠nio**")
                st.dataframe(
                    df_dominio.head(5),
                    column_config={
                        "Habilidade": "Habilidade",
                        "Dom√≠nio (%)": st.column_config.NumberColumn(
                            "Dom√≠nio (%)",
                            format="%.1f%%"
                        ),
                        "Descri√ß√£o": "Descri√ß√£o"
                    },
                    hide_index=True,
                    use_container_width=True
                )
            
            with col2:
                st.write("**Top 5 - Menor Dom√≠nio**")
                st.dataframe(
                    df_dominio.tail(5).sort_values("Dom√≠nio (%)", ascending=True),
                    column_config={
                        "Habilidade": "Habilidade",
                        "Dom√≠nio (%)": st.column_config.NumberColumn(
                            "Dom√≠nio (%)",
                            format="%.1f%%"
                        ),
                        "Descri√ß√£o": "Descri√ß√£o"
                    },
                    hide_index=True,
                    use_container_width=True
                )
            
            # Gr√°fico de calor das habilidades
            st.subheader("Mapa de Calor das Habilidades")
            
            # Calcular percentual de dom√≠nio por turma e habilidade
            heatmap_data = []
            
            for turma in turma_selecionada:
                alunos_turma = alunos_filtrados[alunos_filtrados['Turma'] == turma]
                
                for hab in nome_habilidades.values():
                    dominio = (alunos_turma[hab] > 0).mean() * 100
                    heatmap_data.append({
                        "Turma": turma,
                        "Habilidade": hab,
                        "Dom√≠nio (%)": dominio
                    })
            
            df_heatmap = pd.DataFrame(heatmap_data)
            
            # Criar heatmap
            fig = px.imshow(
                df_heatmap.pivot(index="Habilidade", columns="Turma", values="Dom√≠nio (%)"),
                labels=dict(x="Turma", y="Habilidade", color="Dom√≠nio (%)"),
                color_continuous_scale="RdYlGn",
                range_color=[0, 100],
                title="Percentual de Dom√≠nio por Habilidade e Turma"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        # Adicionar informa√ß√µes sobre a disciplina e prova
        st.sidebar.header("‚ÑπÔ∏è Informa√ß√µes")
        st.sidebar.write(f"**Disciplina:** {disciplina}")
        st.sidebar.write(f"**Prova:** CAED {prova}")
        st.sidebar.write(f"**Habilidades analisadas:** {len(nome_habilidades)}")
        
    except Exception as e:
        st.error(f"Erro ao processar os dados: {e}")
        st.info("Verifique se o formato do arquivo CSV est√° correto.")
else:
    st.info("üí° Para come√ßar, fa√ßa o upload de um arquivo CSV ou verifique se o arquivo est√° na pasta correta.")


st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6B7280; font-size: 14px;">
    <p>Col√©gio Estadual S√£o Braz - Recomposi√ß√£o da Aprendizagem</p>
    <p>¬© 2025 - Todos os direitos reservados</p>
    <p>¬© Desenvolvido por Mauricio A. Ribeiro</p>
</div>""", unsafe_allow_html=True)