import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="üìä Recomposi√ß√£o de Aprendizagem", layout="wide")

# T√≠tulo do aplicativo
st.title("Recomposi√ß√£o de Aprendizagem")

# Dicion√°rios com descri√ß√µes das habilidades por avalia√ß√£o e disciplina
DESCRICOES_HABILIDADES = {
    "CAED1_Matem√°tica": {
        "H01": "Utilizar informa√ß√µes apresentadas em tabelas ou gr√°ficos na resolu√ß√£o de problemas.",
        "H02": "Utilizar o princ√≠pio multiplicativo de contagem na resolu√ß√£o de problema.",
        "H03": "Utilizar probabilidade na resolu√ß√£o de problema.",
        "H04": "Utilizar proporcionalidade entre duas grandezas na resolu√ß√£o de problema.",
        "H05": "Corresponder pontos do plano a pares ordenados em um sistema de coordenadas cartesianas.",
        "H06": "Utilizar o c√°lculo de volumes/capacidade de prismas retos e de cilindros na resolu√ß√£o de problema.",
        "H07": "Utilizar per√≠metro de figuras bidimensionais na resolu√ß√£o de problema.",
        "H08": "Utilizar rela√ß√µes m√©tricas de um tri√¢ngulo ret√¢ngulo na resolu√ß√£o de problema.",
        "H09": "Analisar regi√µes de crescimento/decrescimento, dom√≠nios de validade ou zeros de fun√ß√µes reais representadas graficamente.",
        "H10": "Utilizar fun√ß√£o polinomial de 1¬∫ grau na resolu√ß√£o de problemas.",
        "H11": "Reconhecer a representa√ß√£o alg√©brica de uma fun√ß√£o polinomial de 2¬∫ grau a partir dos dados apresentados em uma tabela.",
        "H12": "Utilizar a medida da √°rea total e/ou lateral de um s√≥lido na resolu√ß√£o de problema.",
        "H13": "Utilizar fun√ß√£o exponencial na resolu√ß√£o de problemas.",
        "H14": "Utilizar fun√ß√£o polinomial de 2¬∫ grau na resolu√ß√£o de problemas.",
        "H15": "Utilizar propriedades de progress√µes aritm√©ticas ou geom√©tricas na resolu√ß√£o de problemas.",
        "H16": "Utilizar equa√ß√£o polinomial de 2¬∫ grau na resolu√ß√£o de problema.",
        "H17": "Reconhecer a representa√ß√£o gr√°fica das fun√ß√µes trigonom√©tricas (seno, cosseno e tangente).",
        "H18": "Resolver problemas que envolvam raz√µes trigonom√©tricas no tri√¢ngulo ret√¢ngulo.",
    },
    "CAED2_Matem√°tica": {
        "H01": "Corresponder figuras tridimensionais √†s suas planifica√ß√µes.",
        "H02": "Utilizar informa√ß√µes apresentadas em tabelas ou gr√°ficos na resolu√ß√£o de problemas",
        "H03": "Utilizar o princip√≠o multiplicativo de contagem na resolu√ß√£o de problema.",
        "H04": "Utilizar probabilidade na resolu√ß√£o de problema.",
        "H05": "Utilizar proporcionalidade entre duas grandezas na resolu√ß√£o de problema.",
        "H06": "Corresponder pontos do plano a pares ordenados em um sistema de coordenadas cartesianas.",
        "H07": "Utilizar o c√°lculo de volumes/capacidade de prismas retos e de cilindros na resolu√ß√£o de problema.",
        "H08": "Utilizar per√≠metro de figuras bidimensionais na resolu√ß√£o de problema.",
        "H09": "Utilizar porcentagem na resolu√ß√£o de problemas.",
        "H10": "Utilizar rela√ß√µes m√©tricas de um tri√¢ngulo ret√¢ngulo na resolu√ß√£o de problema.",
        "H11": "Analisar regi√µes de crescimento/decrescimento, dom√≠nios de validade ou zeros de fun√ß√µes reais representadas graficamente.",
        "H12": "Corresponder a representa√ß√£o alg√©brica e gr√°fica de uma fun√ß√£o polinomial de 1¬∫ grau.",
        "H13": "Utilizar fun√ß√£o polinomial de 1¬∫ grau na resolu√ß√£o de problemas.",
        "H14": "Utilizar a medida da √°rea total e/ou lateral de um s√≥lido na resolu√ß√£o de problema.",
        "H15": "Utilizar fun√ß√£o exponencial na resolu√ß√£o de problemas.",
        "H16": "Utilizar fun√ß√£o polinomial de 2¬∫ grau na resolu√ß√£o de problemas.",
        "H17": "Utilizar propriedades de progress√µes aritm√©ticas ou geom√©tricas na resolu√ß√£o de problemas.",
        "H18": "Identificar a representa√ß√£o alg√©brica ou gr√°fica de uma fun√ß√£o exponencial.",
        "H19": "Utilizar equa√ß√£o polinomial de 2¬∫ grau na resolu√ß√£o de problema.",
        "H20": "Relacionar as ra√≠zes de um polin√¥mio com sua decomposi√ß√£o em fatores do 1¬∫ grau.",
        "H21": "Reconhecer a representa√ß√£o gr√°fica das fun√ß√µes trigonom√©tricas (seno, cosseno e tangente).",
        "H22": "Resolver problemas que envolvam raz√µes trigonom√©tricas no tri√¢ngulo ret√¢ngulo."
    },
    "CAED1_Portugu√™s": {
        "H01": "Reconhecer formas de tratar uma informa√ß√£o na compara√ß√£o de textos que tratam do mesmo tema.",
        "H02": "Localizar informa√ß√£o expl√≠cita.",
        "H03": "Inferir informa√ß√µes em textos.",
        "H04": "Reconhecer efeito de humor ou de ironia em um texto.",
        "H05": "Distinguir ideias centrais de secund√°rias ou t√≥picos and subt√≥picos em um dado g√™nero textual.",
        "H06": "Identificar a tese de um texto.",
        "H07": "Reconhecer posi√ß√µes distintas relativas ao mesmo fato ou mesmo tema.",
        "H08": "Reconhecer as rela√ß√µes entre partes de um texto, identificando os recursos coesivos que contribuem para a sua continuidade.",
        "H09": "Distinguir um fato da opini√£o.",
        "H10": "Reconhecer o sentido das rela√ß√µes l√≥gico-discursivas em um texto.",
        "H11": "Reconhecer o efeito de sentido decorrente da escolha de uma determinada palavra ou express√£o.",
        "H12": "Estabelecer rela√ß√£o entre a tese e os argumentos oferecidos para sustent√°-la.",
        "H13": "Estabelecer rela√ß√£o causa/consequ√™ncia entre partes e elementos do texto.",
        "H14": "Reconhecer o efeito de sentido decorrente da explora√ß√£o de recursos ortogr√°ficos e/ou morfossint√°ticos.",
        "H15": "Identificar as marcas lingu√≠sticas que evidenciam o locutor e o interlocutor de um texto.",
    },
    "CAED2_Portugu√™s": {
        "H01": "Reconhecer formas de tratar uma informa√ß√£o na compara√ß√£o de textos que tratam do mesmo tema.",
        "H02": "Localizar informa√ß√£o expl√≠cita.",
        "H03": "Inferir informa√ß√µes em textos.",
        "H04": "Reconhecer efeito de humor ou de ironia em um texto.",
        "H05": "Distinguir ideias centrais de secund√°rias ou t√≥picos and subt√≥picos em um dado g√™nero textual.",
        "H06": "Identificar a tese de um texto.",
        "H07": "Reconhecer posi√ß√µes distintas relativas ao mesmo fato ou mesmo tema.",
        "H08": "Reconhecer as rela√ß√µes entre partes de um texto, identificando os recursos coesivos que contribuem para a sua continuidade.",
        "H09": "Distinguir um fato da opini√£o.",
        "H10": "Reconhecer o sentido das rela√ß√µes l√≥gico-discursivas em um texto.",
        "H11": "Reconhecer o efeito de sentido decorrente da escolha de uma determinada palavra ou express√£o.",
        "H12": "Estabelecer rela√ß√£o entre a tese e os argumentos oferecidos para sustent√°-la.",
        "H13": "Estabelecer rela√ß√£o causa/consequ√™ncia entre partes e elementos do texto.",
        "H14": "Reconhecer o efeito de sentido decorrente da explora√ß√£o de recursos ortogr√°ficos e/ou morfossint√°ticos.",
        "H15": "Identificar as marcas lingu√≠sticas que evidenciam o locutor e o interlocutor de um texto.",
    }
}

# Mapeamento de arquivos CSV
ARQUIVOS_CSV = {
    "CAED1_Matem√°tica": "CAED1_3_matematica.csv",
    "CAED2_Matem√°tica": "CAED2_3_matematica.csv",
    "CAED1_Portugu√™s": "CAED1_3_portugues.csv",
    "CAED2_Portugu√™s": "CAED2_3_portugues.csv"
}

# Fun√ß√£o para carregar dados
def carregar_dados(avaliacao_disciplina):
    """Carrega o arquivo CSV correspondente √† avalia√ß√£o e disciplina selecionadas"""
    try:
        nome_arquivo = ARQUIVOS_CSV.get(avaliacao_disciplina)
        if not nome_arquivo:
            st.error("Avalia√ß√£o e disciplina n√£o reconhecidas.")
            return None
        
        # Tenta encontrar o arquivo na mesma pasta do script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        csv_path = os.path.join(script_dir, nome_arquivo)
        
        if os.path.exists(csv_path):
            df = pd.read_csv(csv_path, sep=';', encoding='utf-8')
            return df
        else:
            st.error(f"Arquivo '{nome_arquivo}' n√£o encontrado na pasta do script.")
            st.info(f"Certifique-se de que o arquivo '{nome_arquivo}' est√° na mesma pasta que este script.")
            return None
            
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")
        return None

# Fun√ß√£o para obter descri√ß√£o do n√≠vel
def get_nivel_descricao(valor):
    if valor == 0:
        return "‚ùå N√£o Domina"
    elif valor == 1:
        return "‚ö†Ô∏è Domina"
    else:
        return "‚úÖ Domina Plenamente"

# Fun√ß√£o para obter descri√ß√£o da habilidade
def get_descricao_habilidade(codigo, avaliacao_disciplina):
    return DESCRICOES_HABILIDADES.get(avaliacao_disciplina, {}).get(codigo, "Descri√ß√£o n√£o dispon√≠vel")

# Fun√ß√£o segura para calcular porcentagem (evita divis√£o por zero)
def calcular_porcentagem(parte, total):
    if total == 0:
        return 0.0
    return (parte / total) * 100

# Sidebar para sele√ß√£o de avalia√ß√£o e disciplina
st.sidebar.header("üéØ Sele√ß√£o de Dados")
avaliacao = st.sidebar.selectbox(
    "Selecione a avalia√ß√£o:",
    [1, 2]
)

disciplina = st.sidebar.selectbox(
    "Selecione a disciplina:",
    ["Matem√°tica", "Portugu√™s"]
)

# Converter o n√∫mero da avalia√ß√£o para o formato CAED
avaliacao_str = f"CAED{avaliacao}"
avaliacao_disciplina = f"{avaliacao_str}_{disciplina}"

# Carregar dados automaticamente
df = carregar_dados(avaliacao_disciplina)

if df is not None:
    try:
        # Limpar nomes das colunas
        df.columns = df.columns.str.strip()
        
        # Determinar o n√∫mero m√°ximo de habilidades com base na sele√ß√£o
        if avaliacao_disciplina == "CAED1_Matem√°tica":
            max_hab = 18
        elif avaliacao_disciplina == "CAED2_Matem√°tica":
            max_hab = 22
        else:  # Portugu√™s (CAED1 ou CAED2)
            max_hab = 15
        
        # Filtrar apenas as colunas de habilidades
        if avaliacao_disciplina in ["CAED1_Matem√°tica", "CAED2_Matem√°tica"]:
            habilidades_cols = [col for col in df.columns if col.startswith('H ') and int(col.split()[1]) <= max_hab]
            # Renomear colunas para formato mais amig√°vel
            nome_habilidades = {col: f'H{int(col.split()[1]):02d}' for col in habilidades_cols}
        else:  # Portugu√™s
            habilidades_cols = [col for col in df.columns if col.startswith('H') and col[1:].isdigit() and int(col[1:]) <= max_hab]
            # Renomear colunas para formato mais amig√°vel
            nome_habilidades = {col: f'H{int(col[1:]):02d}' for col in habilidades_cols}
        
        df_renomeado = df.rename(columns=nome_habilidades)
        
        # Dados dos alunos com habilidades
        alunos_habilidades = df_renomeado[['Aluno', 'Turma'] + list(nome_habilidades.values())]
        
        # Sidebar com informa√ß√µes
        st.sidebar.header("Col√©gio Estadual S√£o Braz")
        st.sidebar.write("Recomposi√ß√£o da Aprendizagem")
        st.sidebar.header("üìä Informa√ß√µes Gerais")
        st.sidebar.write(f"**Total de Alunos:** {len(alunos_habilidades)}")
        st.sidebar.write(f"**Total de Habilidades:** {len(nome_habilidades)}")
        
        # Filtro por turma no sidebar
        st.sidebar.header("üéØ Filtros")
        turmas_disponiveis = sorted(alunos_habilidades['Turma'].unique())
        turma_selecionada = st.sidebar.multiselect(
            "Selecionar Turma(s):",
            options=turmas_disponiveis,
            default=turmas_disponiveis,
            help="Selecione uma ou mais turmas para filtrar"
        )
        
        # Aplicar filtro de turma
        if turma_selecionada:
            alunos_filtrados = alunos_habilidades[alunos_habilidades['Turma'].isin(turma_selecionada)]
            st.sidebar.write(f"**Turmas selecionadas:** {', '.join(map(str, turma_selecionada))}")
            st.sidebar.write(f"**Alunos filtrados:** {len(alunos_filtrados)}")
        else:
            alunos_filtrados = alunos_habilidades
            st.sidebar.write("**Mostrando todas as turmas**")
        
        # Menu principal
        st.sidebar.header("üîß Navega√ß√£o")
        tipo_analise = st.sidebar.radio(
            "Selecione o tipo de an√°lise:",
            ["Buscar Aluno Espec√≠fico", "Ver Grupos por Habilidade", "Vis√£o Geral dos Grupos", "Estat√≠sticas Gerais"]
        )
        
        if tipo_analise == "Buscar Aluno Espec√≠fico":
            st.header("üîç An√°lise Individual por Aluno")
            
            # Verificar se h√° alunos filtrados
            if len(alunos_filtrados) == 0:
                st.warning("Nenhum aluno encontrado com os filtros aplicados.")
            else:
                # Selecionar aluno apenas da turma filtrada
                alunos_disponiveis = sorted(alunos_filtrados['Aluno'].tolist())
                aluno_selecionado = st.selectbox(
                    "Selecione um aluno:",
                    alunos_disponiveis
                )
                
                # Dados do aluno selecionado
                aluno_data = alunos_filtrados[alunos_filtrados['Aluno'] == aluno_selecionado].iloc[0]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.subheader("‚ùå N√£o Domina")
                    nao_domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 0:
                            nao_domina.append(hab)
                    if nao_domina:
                        for hab in sorted(nao_domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, avaliacao_disciplina)}")
                    else:
                        st.success("üéâ Domina todas as habilidades!")
                
                with col2:
                    st.subheader("‚ö†Ô∏è Domina")
                    domina = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 1:
                            domina.append(hab)
                    if domina:
                        for hab in sorted(domina):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, avaliacao_disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                with col3:
                    st.subheader("‚úÖ Domina Plenamente")
                    domina_plenamente = []
                    for hab in nome_habilidades.values():
                        if aluno_data[hab] == 2:
                            domina_plenamente.append(hab)
                    if domina_plenamente:
                        for hab in sorted(domina_plenamente):
                            st.write(f"‚Ä¢ **{hab}**: {get_descricao_habilidade(hab, avaliacao_disciplina)}")
                    else:
                        st.write("Nenhuma habilidade neste n√≠vel")
                
                # Estat√≠sticas do aluno
                st.subheader("üìä Estat√≠sticas do Aluno")
                col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
                
                with col_stats1:
                    st.metric("N√£o Domina", f"{len(nao_domina)}", f"{calcular_porcentagem(len(nao_domina), len(nome_habilidades)):.1f}%")
                with col_stats2:
                    st.metric("Domina", f"{len(domina)}", f"{calcular_porcentagem(len(domina), len(nome_habilidades)):.1f}%")
                with col_stats3:
                    st.metric("Domina Plenamente", f"{len(domina_plenamente)}", f"{calcular_porcentagem(len(domina_plenamente), len(nome_habilidades)):.1f}%")
                with col_stats4:
                    st.metric("Total Habilidades", len(nome_habilidades))
        
        elif tipo_analise == "Ver Grupos por Habilidade":
            st.header("üë• Grupos por Habilidade")
            
            # Verificar se h√° alunos filtrados
            if len(alunos_filtrados) == 0:
                st.warning("Nenhum aluno encontrado com os filtros aplicados.")
            else:
                # Selecionar habilidade para an√°lise
                habilidade_selecionada = st.selectbox(
                    "Selecione uma habilidade:",
                    sorted(nome_habilidades.values())
                )
                
                # Descri√ß√£o da habilidade
                st.info(f"**Descri√ß√£o:** {get_descricao_habilidade(habilidade_selecionada, avaliacao_disciplina)}")
                
                # Filtrar alunos por n√≠vel de dom√≠nio na habilidade selecionada
                nao_domina = alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 0]
                domina = alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 1]
                domina_plenamente = alunos_filtrados[alunos_filtrados[habilidade_selecionada] == 2]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.subheader(f"‚ùå N√£o Domina ({len(nao_domina)})")
                    if not nao_domina.empty:
                        for _, aluno in nao_domina.iterrows():
                            st.write(f"‚Ä¢ {aluno['Aluno']} - Turma {aluno['Turma']}")
                    else:
                        st.success("üéâ Todos dominam esta habilidade!")
                
                with col2:
                    st.subheader(f"‚ö†Ô∏è Domina ({len(domina)})")
                    if not domina.empty:
                        for _, aluno in domina.iterrows():
                            st.write(f"‚Ä¢ {aluno['Aluno']} - Turma {aluno['Turma']}")
                    else:
                        st.write("Nenhum aluno neste n√≠vel")
                
                with col3:
                    st.subheader(f"‚úÖ Domina Plenamente ({len(domina_plenamente)})")
                    if not domina_plenamente.empty:
                        for _, aluno in domina_plenamente.iterrows():
                            st.write(f"‚Ä¢ {aluno['Aluno']} - Turma {aluno['Turma']}")
                    else:
                        st.write("Nenhum aluno neste n√≠vel")
                
                # Gr√°fico de distribui√ß√£o
                st.subheader("üìä Distribui√ß√£o por N√≠vel de Dom√≠nio")
                fig = px.pie(
                    names=["N√£o Domina", "Domina", "Domina Plenamente"],
                    values=[len(nao_domina), len(domina), len(domina_plenamente)],
                    color=["N√£o Domina", "Domina", "Domina Plenamente"],
                    color_discrete_map={
                        "N√£o Domina": "red",
                        "Domina": "orange",
                        "Domina Plenamente": "green"
                    }
                )
                st.plotly_chart(fig, use_container_width=True)
        
        elif tipo_analise == "Vis√£o Geral dos Grupos":
            st.header("üìã Vis√£o Geral dos Grupos")
            
            # Verificar se h√° alunos filtrados
            if len(alunos_filtrados) == 0:
                st.warning("Nenhum aluno encontrado com os filtros aplicados.")
            else:
                # Tabela com contagem de alunos por n√≠vel para cada habilidade
                st.subheader("üìà Estat√≠sticas por Habilidade")
                
                # Calcular estat√≠sticas para cada habilidade
                stats_data = []
                for hab in sorted(nome_habilidades.values()):
                    total = len(alunos_filtrados)
                    nao_domina_count = len(alunos_filtrados[alunos_filtrados[hab] == 0])
                    domina_count = len(alunos_filtrados[alunos_filtrados[hab] == 1])
                    domina_plenamente_count = len(alunos_filtrados[alunos_filtrados[hab] == 2])
                    
                    stats_data.append({
                        "Habilidade": hab,
                        "Descri√ß√£o": get_descricao_habilidade(hab, avaliacao_disciplina),
                        "N√£o Domina": nao_domina_count,
                        "Domina": domina_count,
                        "Domina Plenamente": domina_plenamente_count,
                        "% N√£o Domina": f"{calcular_porcentagem(nao_domina_count, total):.1f}%",
                        "% Domina": f"{calcular_porcentagem(domina_count, total):.1f}%",
                        "% Domina Plenamente": f"{calcular_porcentagem(domina_plenamente_count, total):.1f}%"
                    })
                
                stats_df = pd.DataFrame(stats_data)
                
                # Mostrar tabela com estat√≠sticas
                st.dataframe(
                    stats_df,
                    column_config={
                        "Habilidade": st.column_config.TextColumn("Habilidade", width="small"),
                        "Descri√ß√£o": st.column_config.TextColumn("Descri√ß√£o", width="large"),
                        "N√£o Domina": st.column_config.NumberColumn("N√£o Domina", format="%d"),
                        "Domina": st.column_config.NumberColumn("Domina", format="%d"),
                        "Domina Plenamente": st.column_config.NumberColumn("Domina Plenamente", format="%d"),
                        "% N√£o Domina": st.column_config.TextColumn("% N√£o Domina"),
                        "% Domina": st.column_config.TextColumn("% Domina"),
                        "% Domina Plenamente": st.column_config.TextColumn("% Domina Plenamente")
                    },
                    hide_index=True,
                    use_container_width=True
                )
                
                # Gr√°fico de barras com as habilidades mais problem√°ticas
                st.subheader("üìä Habilidades com Maior Dificuldade")
                
                # Ordenar por % de "N√£o Domina"
                stats_df_sorted = stats_df.sort_values("N√£o Domina", ascending=False)
                
                fig = px.bar(
                    stats_df_sorted.head(10),
                    x="Habilidade",
                    y="N√£o Domina",
                    color="N√£o Domina",
                    color_continuous_scale="reds",
                    title="Top 10 Habilidades com Maior N√∫mero de Alunos que N√£o Dominam"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        elif tipo_analise == "Estat√≠sticas Gerais":
            st.header("üìä Estat√≠sticas Gerais")
            
            # Verificar se h√° alunos filtrados
            if len(alunos_filtrados) == 0:
                st.warning("Nenhum aluno encontrado com os filtros aplicados.")
            else:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # Calcular total de alunos
                    total_alunos = len(alunos_filtrados)
                    st.metric("Total de Alunos", total_alunos)
                
                with col2:
                    # Calcular m√©dia de habilidades dominadas plenamente por aluno
                    habilidades_dominadas = alunos_filtrados[list(nome_habilidades.values())].apply(
                        lambda row: sum(row == 2), axis=1
                    )
                    media_dominadas = habilidades_dominadas.mean()
                    st.metric("M√©dia de Habilidades Dominadas Plenamente", f"{media_dominadas:.1f}")
                
                with col3:
                    # Calcular m√©dia de habilidades n√£o dominadas por aluno
                    habilidades_nao_dominadas = alunos_filtrados[list(nome_habilidades.values())].apply(
                        lambda row: sum(row == 0), axis=1
                    )
                    media_nao_dominadas = habilidades_nao_dominadas.mean()
                    st.metric("M√©dia de Habilidades N√£o Dominadas", f"{media_nao_dominadas:.1f}")
                
                # Distribui√ß√£o geral de dom√≠nio
                st.subheader("üìà Distribui√ß√£o Geral de Dom√≠nio")
                
                total_habilidades = len(nome_habilidades) * total_alunos
                total_nao_domina = (alunos_filtrados[list(nome_habilidades.values())] == 0).sum().sum()
                total_domina = (alunos_filtrados[list(nome_habilidades.values())] == 1).sum().sum()
                total_domina_plenamente = (alunos_filtrados[list(nome_habilidades.values())] == 2).sum().sum()
                
                fig = px.pie(
                    names=["N√£o Domina", "Domina", "Domina Plenamente"],
                    values=[total_nao_domina, total_domina, total_domina_plenamente],
                    color=["N√£o Domina", "Domina", "Domina Plenamente"],
                    color_discrete_map={
                        "N√£o Domina": "red",
                        "Domina": "orange",
                        "Domina Plenamente": "green"
                    },
                    title="Distribui√ß√£o Geral dos N√≠veis de Dom√≠nio"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Mapa de calor das habilidades
                st.subheader("üå°Ô∏è Mapa de Calor das Habilidades")
                
                # Calcular a porcentagem de alunos que n√£o dominam cada habilidade
                heatmap_data = []
                for hab in sorted(nome_habilidades.values()):
                    nao_domina_count = len(alunos_filtrados[alunos_filtrados[hab] == 0])
                    porcentagem_nao_domina = calcular_porcentagem(nao_domina_count, total_alunos)
                    heatmap_data.append(porcentagem_nao_domina)
                
                # Criar o heatmap
                fig = go.Figure(data=go.Heatmap(
                    z=[heatmap_data],
                    x=sorted(nome_habilidades.values()),
                    y=["% N√£o Domina"],
                    colorscale='reds',
                    hoverongaps=False,
                    colorbar=dict(title="% N√£o Domina")
                ))
                
                fig.update_layout(
                    title="Porcentagem de Alunos que N√£o Dominam cada Habilidade",
                    xaxis_title="Habilidades",
                    yaxis_title=""
                )
                
                st.plotly_chart(fig, use_container_width=True)
        
        # Informa√ß√µes sobre a avalia√ß√£o e disciplina
        st.sidebar.header("‚ÑπÔ∏è Informa√ß√µes")
        st.sidebar.write(f"Avalia√ß√£o: {avaliacao_str}")
        st.sidebar.write(f"Disciplina: {disciplina}")
        st.sidebar.write(f"Habilidades: {len(nome_habilidades)}")
        
    except Exception as e:
        st.error(f"Erro ao processar os dados: {e}")
        st.info("Verifique se a estrutura do arquivo CSV est√° correta.")
else:
    st.info("Por favor, fa√ßa o upload dos arquivos CSV necess√°rios ou coloque-os na mesma pasta do script.")


# Rodap√©
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6B7280; font-size: 14px;">
    <p>Col√©gio Estadual S√£o Braz - Recomposi√ß√£o da Aprendizagem</p>
    <p>¬© 2025 - Todos os direitos reservados</p>
    <p>¬© Desenvolvido por Mauricio A. Ribeiro</p>
</div>
""", unsafe_allow_html=True)
